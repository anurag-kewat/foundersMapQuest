// Generated by CoffeeScript 1.10.0
(function() {
  var Main,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Main = Main = (function() {
    function Main() {
      this.initializeMap = bind(this.initializeMap, this);
      this.intializeDefaultMap = bind(this.intializeDefaultMap, this);
      this.map;
      this.latColumn = "Garage Latitude";
      this.lngColumn = "Garage Longitude";
      this.userInputData = "";
      this.userDetailsSection = ".UserDetails_section";
      this.allData = this.getCSVStoredDataArray();
      this.intializeDefaultMap();
    }

    Main.prototype.init = function() {
      $("body").on("click", "#submitInput", (function(_this) {
        return function(e) {
          var inputText;
          inputText = $("#inputTextArea").val();
          if (inputText !== "") {
            _this.userInputData = $.csv.toObjects(inputText);
            _this.getHtmlForSelectingLatLng();
            $(_this.userDetailsSection).removeClass("active");
            return $(".UserDetails_configDetails").addClass("active");
          }
        };
      })(this));
      $("body").on("click", "#submitConfig", (function(_this) {
        return function(e) {
          var html;
          _this.latColumn = $("#configTable").find("input[type='radio'][name='latitude']:checked").attr("value");
          _this.lngColumn = $("#configTable").find("input[type='radio'][name='longitude']:checked").attr("value");
          if (_this.latColumn !== void 0 && _this.lngColumn !== void 0) {
            html = _this.generateTable(_this.userInputData);
            $("#locationTable").html(html);
            $(_this.userDetailsSection).removeClass("active");
            return $(".UserDetails_dataTable").addClass("active");
          }
        };
      })(this));
      $("body").on("click", ".UserDetails_prev", (function(_this) {
        return function(e) {
          var prevSection;
          prevSection = $(e.target).parent(_this.userDetailsSection).prev(_this.userDetailsSection);
          $(_this.userDetailsSection).removeClass("active");
          return prevSection.addClass("active");
        };
      })(this));
      return $("body").on("click", "#submitData", (function(_this) {
        return function(e) {
          _this.allData = _this.userInputData;
          _this.getMarkersOnMap(_this.map);
          $(_this.userDetailsSection).removeClass("active");
          return $(".UserDetails_done").addClass("active");
        };
      })(this));
    };

    Main.prototype.getHtmlForSelectingLatLng = function() {
      var html, item, keysAr;
      $("#configTable").empty();
      html = "";
      html += "<tr> <td></td> <td>Latitude</td> <td>Longitude</td> </tr>";
      keysAr = Object.keys(this.userInputData[0]);
      for (item in keysAr) {
        html += "<tr><td>" + keysAr[item] + "</td>";
        html += "<td><input type='radio' name='latitude' value='" + keysAr[item] + "' /></td>";
        html += "<td><input type='radio' name='longitude' value='" + keysAr[item] + "' /></td>";
        html += "</tr>\r\n";
      }
      return $(html).appendTo("#configTable");
    };

    Main.prototype.getCSVStoredDataArray = function() {
      var dataArray;
      dataArray = [];
      $.ajax({
        type: "GET",
        async: false,
        url: "data/sample.csv",
        dataType: "text",
        success: (function(_this) {
          return function(csvdata) {
            return dataArray = $.csv.toObjects(csvdata);
          };
        })(this)
      });
      return dataArray;
    };

    Main.prototype.getUsersDataOnPageLoad = function() {
      var dataArray, html;
      dataArray = this.getCSVStoredDataArray();
      html = this.generateTable(dataArray);
      return $("#locationTable").html(html);
    };

    Main.prototype.generateTable = function(data) {
      var keysAr, requiredHtml;
      requiredHtml = "";
      if (typeof data[0] === 'undefined') {
        return null;
      }
      keysAr = Object.keys(data[0]);
      requiredHtml += this.gettingHeader(keysAr);
      requiredHtml += this.gettingRows(data);
      return requiredHtml;
    };

    Main.prototype.gettingHeader = function(keysAr) {
      var html, item;
      html = "";
      html += "<thead><tr>\r\n";
      for (item in keysAr) {
        html += "<td>" + keysAr[item] + "</td>\r\n";
      }
      html += "<td>Active/Inactive</td>";
      html += "</tr></thead>\r\n";
      return html;
    };

    Main.prototype.gettingRows = function(data) {
      var html, i, val, values;
      html = "";
      html += "<tbody>";
      i = 0;
      while (i <= data.length - 1) {
        values = Object.values(data[i]);
        html = html + '<tr>\u000d\n';
        for (val in values) {
          html += '<td>' + values[val] + '</td>\u000d\n';
        }
        html += '<td><input type=\'checkbox\' id=\'' + values[0] + '\'></td>';
        html += '</tr>\u000d\n';
        i++;
      }
      html += "</tbody>";
      return html;
    };

    Main.prototype.getGeoLocations = function() {
      var valuesAr;
      valuesAr = [];
      $.each(this.allData, (function(_this) {
        return function(i, row) {
          var values;
          values = {
            "lat": row[_this.latColumn],
            "lng": row[_this.lngColumn]
          };
          return valuesAr.push(values);
        };
      })(this));
      return valuesAr;
    };

    Main.prototype.intializeDefaultMap = function() {
      return google.maps.event.addDomListener(window, 'load', this.initializeMap);
    };

    Main.prototype.initializeMap = function() {
      var infoWindow, mapProp, position;
      infoWindow = this.getGeoLocations()[0];
      position = new google.maps.LatLng(infoWindow.lat, infoWindow.lng);
      mapProp = {
        center: position,
        zoom: 10,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
      this.map = new google.maps.Map(document.getElementById("googleMap"), mapProp);
      return this.getMarkersOnMap(this.map);
    };

    Main.prototype.getMarkersOnMap = function(map) {
      $.each(this.getGeoLocations(), function(i, location) {
        var marker;
        marker = new google.maps.Marker({
          position: new google.maps.LatLng(location.lat, location.lng)
        });
        return marker.setMap(map);
      });
    };

    return Main;

  })();

}).call(this);
