// Generated by CoffeeScript 1.10.0
(function() {
  var CreateTable, Main, Popup, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Main = Main = (function() {
    function Main() {
      this.initializeMap = bind(this.initializeMap, this);
      this.intializeDefaultMap = bind(this.intializeDefaultMap, this);
      this.map;
      this.latLngArray = [];
      this.latColumn = "Garage Latitude";
      this.lngColumn = "Garage Longitude";
      this.markLabel = "Founder";
      this.flag = 0;
      this.userInputData = "";
      this.userDetailsSection = ".UserDetails_section";
      this.excludeParams = ["id", "Id", "Display on Map"];
      this.popup = new Popup(this.userDetailsSection, ".UserDetails_getDetails");
      this.createTable = new CreateTable(this.excludeParams);
      this.allData = this.getCSVStoredDataArray();
      this.intializeDefaultMap();
    }

    Main.prototype.init = function() {
      $("body").on("click", "#submitInput", (function(_this) {
        return function(e) {
          var inputText;
          inputText = $("#inputTextArea").val();
          if (inputText !== "") {
            _this.userInputData = $.csv.toObjects(inputText);
            _this.getHtmlForSelectingLatLng();
            return _this.activeRelavantSectionInPopup($(".UserDetails_configDetails"));
          }
        };
      })(this));
      $("body").on("click", "#submitConfig", (function(_this) {
        return function(e) {
          var html;
          _this.latColumn = $("#configTable").find("input[type='radio'][name='latitude']:checked").attr("value");
          _this.lngColumn = $("#configTable").find("input[type='radio'][name='longitude']:checked").attr("value");
          _this.markLabel = $("#configTable").find("input[type='radio'][name='markerLabel']:checked").attr("value");
          if (_this.latColumn !== void 0 && _this.lngColumn !== void 0 && _this.markLabel !== void 0) {
            _this.addPropInObjects();
            html = _this.createTable.generateTable(_this.userInputData);
            $(".DataTable").addClass("Show");
            $("#locationTable").html(html).tablesorter();
            _this.allData = _this.userInputData;
            if (_this.flag > 0) {
              _this.removeMarkers();
            }
            _this.getMarkersOnMap(_this.map);
            _this.emptyInputTextArea();
            _this.activeRelavantSectionInPopup($(".UserDetails_done"));
            setTimeout((function() {
              return _this.popup.closePopup();
            }), 800);
            return _this.flag++;
          }
        };
      })(this));
      $("body").on("click", ".UserDetails_prev", (function(_this) {
        return function(e) {
          var prevSection;
          prevSection = $(e.target).parent(_this.userDetailsSection).prev(_this.userDetailsSection);
          return _this.activeRelavantSectionInPopup(prevSection);
        };
      })(this));
      return $("body").on("click", "#submitTable", (function(_this) {
        return function(e) {
          _this.removeItemsWhichNotChecked();
          _this.allData = _this.userInputData;
          _this.removeMarkers();
          _this.getMarkersOnMap(_this.map);
          return $(e.target).next("span").show().fadeOut(1000);
        };
      })(this));
    };

    Main.prototype.activeRelavantSectionInPopup = function(section) {
      $(this.userDetailsSection).removeClass("active");
      return section.addClass("active");
    };

    Main.prototype.emptyInputTextArea = function() {
      return $("#inputTextArea").val(null);
    };

    Main.prototype.addPropInObjects = function() {
      var item, results;
      results = [];
      for (item in this.userInputData) {
        this.userInputData[item]["id"] = item;
        results.push(this.userInputData[item]["Display on Map"] = "yes");
      }
      return results;
    };

    Main.prototype.removeItemsWhichNotChecked = function() {
      $(".DataTable_displayCheck").each((function(_this) {
        return function(i, check) {
          var disableItem, display;
          display = "yes";
          if (!$(check).is(":checked")) {
            display = "no";
          }
          disableItem = $(check).attr("id");
          _this.userInputData[disableItem]["Display on Map"] = display;
        };
      })(this));
    };

    Main.prototype.getHtmlForSelectingLatLng = function() {
      var html, item, keysAr;
      $("#configTable").empty();
      html = "";
      html += "<tr> <td></td> <td><b>Latitude</b></td> <td><b>Longitude</b></td> <td><b>Marker Label</b></td> </tr>";
      keysAr = Object.keys(this.userInputData[0]);
      for (item in keysAr) {
        html += "<tr><td>" + keysAr[item] + "</td>";
        html += "<td><input type='radio' name='latitude' value='" + keysAr[item] + "' /></td>";
        html += "<td><input type='radio' name='longitude' value='" + keysAr[item] + "' /></td>";
        html += "<td><input type='radio' name='markerLabel' value='" + keysAr[item] + "' /></td>";
        html += "</tr>\r\n";
      }
      return $(html).appendTo("#configTable");
    };

    Main.prototype.getCSVStoredDataArray = function() {
      var dataArray;
      dataArray = [];
      $.ajax({
        type: "GET",
        async: false,
        url: "data/sample.csv",
        dataType: "text",
        success: function(csvdata) {
          return dataArray = $.csv.toObjects(csvdata);
        }
      });
      return dataArray;
    };

    Main.prototype.getUsersDataOnPageLoad = function() {
      var dataArray, html;
      dataArray = this.getCSVStoredDataArray();
      html = this.createTable.generateTable(dataArray);
      return $("#defaultDataTable").html(html).tablesorter({
        sortList: [[0, 0]]
      });
    };

    Main.prototype.getGeoLocations = function() {
      var valuesAr;
      valuesAr = [];
      $.each(this.allData, (function(_this) {
        return function(i, row) {
          var values;
          values = {
            "lat": row[_this.latColumn],
            "lng": row[_this.lngColumn],
            "label": row[_this.markLabel]
          };
          if (row["Display on Map"] === "yes") {
            return valuesAr.push(values);
          }
        };
      })(this));
      return valuesAr;
    };

    Main.prototype.intializeDefaultMap = function() {
      return google.maps.event.addDomListener(window, 'load', this.initializeMap);
    };

    Main.prototype.initializeMap = function() {
      var infoWindow, mapProp, position;
      infoWindow = this.getGeoLocations()[0];
      position = new google.maps.LatLng(infoWindow.lat, infoWindow.lng);
      mapProp = {
        center: position,
        zoom: 5,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
      this.map = new google.maps.Map(document.getElementById("googleMap"), mapProp);
      return this.getMarkersOnMap(this.map);
    };

    Main.prototype.getMarkersOnMap = function(map) {
      this.latLngArray = [];
      $.each(this.getGeoLocations(), (function(_this) {
        return function(i, location) {
          var infowindow, marker;
          marker = new google.maps.Marker({
            position: new google.maps.LatLng(location.lat, location.lng)
          });
          marker.setMap(map);
          _this.latLngArray.push(marker);
          infowindow = new google.maps.InfoWindow({
            content: location.label
          });
          return infowindow.open(map, marker);
        };
      })(this));
    };

    Main.prototype.removeMarkers = function() {
      var mark, results;
      results = [];
      for (mark in this.latLngArray) {
        results.push(this.latLngArray[mark].setMap(null));
      }
      return results;
    };

    return Main;

  })();

  CreateTable = (function() {
    function CreateTable(excludeParams) {
      this.excludeParams = excludeParams;
    }

    CreateTable.prototype.generateTable = function(data) {
      var keysAr, requiredHtml;
      requiredHtml = "";
      if (typeof data[0] === 'undefined') {
        return null;
      }
      keysAr = Object.keys(data[0]);
      requiredHtml += this.gettingHeader(keysAr);
      requiredHtml += this.gettingRows(data, keysAr);
      return requiredHtml;
    };

    CreateTable.prototype.gettingHeader = function(keysAr) {
      var html, item;
      html = "";
      html += "<thead><tr>\r\n";
      for (item in keysAr) {
        if ($.inArray(keysAr[item], this.excludeParams) === -1) {
          html += "<th><span>" + keysAr[item] + "</span></th>\r\n";
        }
      }
      html += "<th>Active/Inactive</th>";
      html += "</tr></thead>\r\n";
      return html;
    };

    CreateTable.prototype.gettingRows = function(data, keysAr) {
      var html, i, item, key;
      html = "";
      html += "<tbody>";
      i = 0;
      while (i <= data.length - 1) {
        html = html + '<tr>\u000d\n';
        for (key in keysAr) {
          item = data[i][keysAr[key]];
          if ($.inArray(keysAr[key], this.excludeParams) === -1) {
            if (this.checkIfValueIsUrl(item)) {
              if (Utils.isImage(item) > -1) {
                html += '<td><img src=\'' + item + '\'/></td>\u000d\n';
              } else {
                html += '<td><a target=\'_blank\' href=\'' + item + '\'>' + item + '</a></td>\u000d\n';
              }
            } else {
              html += '<td>' + item + '</td>\u000d\n';
            }
          }
        }
        html += '<td><input class=\'DataTable_displayCheck\' checked type=\'checkbox\' id=\'' + i + '\'></td>';
        html += '</tr>\u000d\n';
        i++;
      }
      html += "</tbody>";
      return html;
    };

    CreateTable.prototype.checkIfValueIsUrl = function(val) {
      return Utils.isUrlValid($.trim(val));
    };

    return CreateTable;

  })();

  window.Popup = Popup = (function() {
    function Popup(userDetailsSection, userDetailsGetInput) {
      $("#openUserScreen").click(function(e) {
        var popup;
        popup = $(".Popup");
        popup.find(".TransparentBg").fadeIn(200, function() {
          return {
            complete: popup.find(".Popup_container").addClass("Show").removeClass("jsRemoveShow")
          };
        });
        $(userDetailsSection).removeClass("active");
        $(userDetailsGetInput).addClass("active");
        return Utils.disableScroll();
      });
      $(".PanelCloseBtn").click((function(_this) {
        return function() {
          return _this.closePopup();
        };
      })(this));
      this.setPopupDimensions();
      $(window).on("resize", (function(_this) {
        return function() {
          return _this.setPopupDimensions();
        };
      })(this));
      $(document).click((function(_this) {
        return function(e) {
          var el;
          if ($(".Popup").find(".Popup_container").hasClass("Show")) {
            el = $(e.target);
            if (!(el.hasClass("Popup_container") || el.parents(".Popup_container").length || el.hasClass("ShowPopup"))) {
              return _this.closePopup();
            }
          }
        };
      })(this));
    }

    Popup.prototype.setPopupDimensions = function() {
      var screenHeight, screenWidth;
      screenHeight = $(window).height();
      screenWidth = $(window).width();
      if ($(window).width < 600) {
        return $(".Popup_content").css("max-height", screenHeight - 140);
      } else {
        return $(".Popup_content").css("max-height", screenHeight - 160);
      }
    };

    Popup.prototype.closePopup = function() {
      $(".Popup").find(".TransparentBg").fadeOut(200, function() {
        return {
          complete: $(".Popup").find(".Popup_container").removeClass("Show").addClass("jsRemoveShow")
        };
      });
      return Utils.enableScroll();
    };

    return Popup;

  })();

  window.Utils = Utils = (function() {
    function Utils() {}

    Utils.disableScroll = function() {
      return $("body").addClass("disableScroll");
    };

    Utils.enableScroll = function() {
      return $("body").removeClass("disableScroll");
    };

    Utils.isUrlValid = function(url) {
      return /^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(url);
    };

    Utils.isImage = function(url) {
      var extension, imageExt;
      imageExt = ["jpg", "png", "gif"];
      extension = url.substr(url.lastIndexOf('.') + 1);
      return $.inArray(extension, imageExt);
    };

    return Utils;

  })();

}).call(this);
